// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/konrawitAEK/app/ent/department"
	"github.com/konrawitAEK/app/ent/physician"
	"github.com/konrawitAEK/app/ent/position"
	"github.com/konrawitAEK/app/ent/positionassingment"
	"github.com/konrawitAEK/app/ent/predicate"
)

// PositionassingmentUpdate is the builder for updating Positionassingment entities.
type PositionassingmentUpdate struct {
	config
	hooks      []Hook
	mutation   *PositionassingmentMutation
	predicates []predicate.Positionassingment
}

// Where adds a new predicate for the builder.
func (pu *PositionassingmentUpdate) Where(ps ...predicate.Positionassingment) *PositionassingmentUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetDayStart sets the DayStart field.
func (pu *PositionassingmentUpdate) SetDayStart(t time.Time) *PositionassingmentUpdate {
	pu.mutation.SetDayStart(t)
	return pu
}

// SetFormdataID sets the formdata edge to Physician by id.
func (pu *PositionassingmentUpdate) SetFormdataID(id int) *PositionassingmentUpdate {
	pu.mutation.SetFormdataID(id)
	return pu
}

// SetNillableFormdataID sets the formdata edge to Physician by id if the given value is not nil.
func (pu *PositionassingmentUpdate) SetNillableFormdataID(id *int) *PositionassingmentUpdate {
	if id != nil {
		pu = pu.SetFormdataID(*id)
	}
	return pu
}

// SetFormdata sets the formdata edge to Physician.
func (pu *PositionassingmentUpdate) SetFormdata(p *Physician) *PositionassingmentUpdate {
	return pu.SetFormdataID(p.ID)
}

// SetFormdepartmentID sets the formdepartment edge to Department by id.
func (pu *PositionassingmentUpdate) SetFormdepartmentID(id int) *PositionassingmentUpdate {
	pu.mutation.SetFormdepartmentID(id)
	return pu
}

// SetNillableFormdepartmentID sets the formdepartment edge to Department by id if the given value is not nil.
func (pu *PositionassingmentUpdate) SetNillableFormdepartmentID(id *int) *PositionassingmentUpdate {
	if id != nil {
		pu = pu.SetFormdepartmentID(*id)
	}
	return pu
}

// SetFormdepartment sets the formdepartment edge to Department.
func (pu *PositionassingmentUpdate) SetFormdepartment(d *Department) *PositionassingmentUpdate {
	return pu.SetFormdepartmentID(d.ID)
}

// SetFormpositionID sets the formposition edge to Position by id.
func (pu *PositionassingmentUpdate) SetFormpositionID(id int) *PositionassingmentUpdate {
	pu.mutation.SetFormpositionID(id)
	return pu
}

// SetNillableFormpositionID sets the formposition edge to Position by id if the given value is not nil.
func (pu *PositionassingmentUpdate) SetNillableFormpositionID(id *int) *PositionassingmentUpdate {
	if id != nil {
		pu = pu.SetFormpositionID(*id)
	}
	return pu
}

// SetFormposition sets the formposition edge to Position.
func (pu *PositionassingmentUpdate) SetFormposition(p *Position) *PositionassingmentUpdate {
	return pu.SetFormpositionID(p.ID)
}

// Mutation returns the PositionassingmentMutation object of the builder.
func (pu *PositionassingmentUpdate) Mutation() *PositionassingmentMutation {
	return pu.mutation
}

// ClearFormdata clears the formdata edge to Physician.
func (pu *PositionassingmentUpdate) ClearFormdata() *PositionassingmentUpdate {
	pu.mutation.ClearFormdata()
	return pu
}

// ClearFormdepartment clears the formdepartment edge to Department.
func (pu *PositionassingmentUpdate) ClearFormdepartment() *PositionassingmentUpdate {
	pu.mutation.ClearFormdepartment()
	return pu
}

// ClearFormposition clears the formposition edge to Position.
func (pu *PositionassingmentUpdate) ClearFormposition() *PositionassingmentUpdate {
	pu.mutation.ClearFormposition()
	return pu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PositionassingmentUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionassingmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PositionassingmentUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PositionassingmentUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PositionassingmentUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PositionassingmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   positionassingment.Table,
			Columns: positionassingment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: positionassingment.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DayStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: positionassingment.FieldDayStart,
		})
	}
	if pu.mutation.FormdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   positionassingment.FormdataTable,
			Columns: []string{positionassingment.FormdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FormdataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   positionassingment.FormdataTable,
			Columns: []string{positionassingment.FormdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FormdepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   positionassingment.FormdepartmentTable,
			Columns: []string{positionassingment.FormdepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FormdepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   positionassingment.FormdepartmentTable,
			Columns: []string{positionassingment.FormdepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FormpositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   positionassingment.FormpositionTable,
			Columns: []string{positionassingment.FormpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FormpositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   positionassingment.FormpositionTable,
			Columns: []string{positionassingment.FormpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{positionassingment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PositionassingmentUpdateOne is the builder for updating a single Positionassingment entity.
type PositionassingmentUpdateOne struct {
	config
	hooks    []Hook
	mutation *PositionassingmentMutation
}

// SetDayStart sets the DayStart field.
func (puo *PositionassingmentUpdateOne) SetDayStart(t time.Time) *PositionassingmentUpdateOne {
	puo.mutation.SetDayStart(t)
	return puo
}

// SetFormdataID sets the formdata edge to Physician by id.
func (puo *PositionassingmentUpdateOne) SetFormdataID(id int) *PositionassingmentUpdateOne {
	puo.mutation.SetFormdataID(id)
	return puo
}

// SetNillableFormdataID sets the formdata edge to Physician by id if the given value is not nil.
func (puo *PositionassingmentUpdateOne) SetNillableFormdataID(id *int) *PositionassingmentUpdateOne {
	if id != nil {
		puo = puo.SetFormdataID(*id)
	}
	return puo
}

// SetFormdata sets the formdata edge to Physician.
func (puo *PositionassingmentUpdateOne) SetFormdata(p *Physician) *PositionassingmentUpdateOne {
	return puo.SetFormdataID(p.ID)
}

// SetFormdepartmentID sets the formdepartment edge to Department by id.
func (puo *PositionassingmentUpdateOne) SetFormdepartmentID(id int) *PositionassingmentUpdateOne {
	puo.mutation.SetFormdepartmentID(id)
	return puo
}

// SetNillableFormdepartmentID sets the formdepartment edge to Department by id if the given value is not nil.
func (puo *PositionassingmentUpdateOne) SetNillableFormdepartmentID(id *int) *PositionassingmentUpdateOne {
	if id != nil {
		puo = puo.SetFormdepartmentID(*id)
	}
	return puo
}

// SetFormdepartment sets the formdepartment edge to Department.
func (puo *PositionassingmentUpdateOne) SetFormdepartment(d *Department) *PositionassingmentUpdateOne {
	return puo.SetFormdepartmentID(d.ID)
}

// SetFormpositionID sets the formposition edge to Position by id.
func (puo *PositionassingmentUpdateOne) SetFormpositionID(id int) *PositionassingmentUpdateOne {
	puo.mutation.SetFormpositionID(id)
	return puo
}

// SetNillableFormpositionID sets the formposition edge to Position by id if the given value is not nil.
func (puo *PositionassingmentUpdateOne) SetNillableFormpositionID(id *int) *PositionassingmentUpdateOne {
	if id != nil {
		puo = puo.SetFormpositionID(*id)
	}
	return puo
}

// SetFormposition sets the formposition edge to Position.
func (puo *PositionassingmentUpdateOne) SetFormposition(p *Position) *PositionassingmentUpdateOne {
	return puo.SetFormpositionID(p.ID)
}

// Mutation returns the PositionassingmentMutation object of the builder.
func (puo *PositionassingmentUpdateOne) Mutation() *PositionassingmentMutation {
	return puo.mutation
}

// ClearFormdata clears the formdata edge to Physician.
func (puo *PositionassingmentUpdateOne) ClearFormdata() *PositionassingmentUpdateOne {
	puo.mutation.ClearFormdata()
	return puo
}

// ClearFormdepartment clears the formdepartment edge to Department.
func (puo *PositionassingmentUpdateOne) ClearFormdepartment() *PositionassingmentUpdateOne {
	puo.mutation.ClearFormdepartment()
	return puo
}

// ClearFormposition clears the formposition edge to Position.
func (puo *PositionassingmentUpdateOne) ClearFormposition() *PositionassingmentUpdateOne {
	puo.mutation.ClearFormposition()
	return puo
}

// Save executes the query and returns the updated entity.
func (puo *PositionassingmentUpdateOne) Save(ctx context.Context) (*Positionassingment, error) {

	var (
		err  error
		node *Positionassingment
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PositionassingmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PositionassingmentUpdateOne) SaveX(ctx context.Context) *Positionassingment {
	po, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return po
}

// Exec executes the query on the entity.
func (puo *PositionassingmentUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PositionassingmentUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PositionassingmentUpdateOne) sqlSave(ctx context.Context) (po *Positionassingment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   positionassingment.Table,
			Columns: positionassingment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: positionassingment.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Positionassingment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.DayStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: positionassingment.FieldDayStart,
		})
	}
	if puo.mutation.FormdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   positionassingment.FormdataTable,
			Columns: []string{positionassingment.FormdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FormdataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   positionassingment.FormdataTable,
			Columns: []string{positionassingment.FormdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: physician.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FormdepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   positionassingment.FormdepartmentTable,
			Columns: []string{positionassingment.FormdepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FormdepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   positionassingment.FormdepartmentTable,
			Columns: []string{positionassingment.FormdepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FormpositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   positionassingment.FormpositionTable,
			Columns: []string{positionassingment.FormpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FormpositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   positionassingment.FormpositionTable,
			Columns: []string{positionassingment.FormpositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: position.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	po = &Positionassingment{config: puo.config}
	_spec.Assign = po.assignValues
	_spec.ScanValues = po.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{positionassingment.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return po, nil
}
