// Code generated by entc, DO NOT EDIT.

package physician

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/konrawitAEK/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NAME applies equality check predicate on the "NAME" field. It's identical to NAMEEQ.
func NAME(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNAME), v))
	})
}

// EMAIL applies equality check predicate on the "EMAIL" field. It's identical to EMAILEQ.
func EMAIL(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEMAIL), v))
	})
}

// NAMEEQ applies the EQ predicate on the "NAME" field.
func NAMEEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNAME), v))
	})
}

// NAMENEQ applies the NEQ predicate on the "NAME" field.
func NAMENEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNAME), v))
	})
}

// NAMEIn applies the In predicate on the "NAME" field.
func NAMEIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNAME), v...))
	})
}

// NAMENotIn applies the NotIn predicate on the "NAME" field.
func NAMENotIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNAME), v...))
	})
}

// NAMEGT applies the GT predicate on the "NAME" field.
func NAMEGT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNAME), v))
	})
}

// NAMEGTE applies the GTE predicate on the "NAME" field.
func NAMEGTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNAME), v))
	})
}

// NAMELT applies the LT predicate on the "NAME" field.
func NAMELT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNAME), v))
	})
}

// NAMELTE applies the LTE predicate on the "NAME" field.
func NAMELTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNAME), v))
	})
}

// NAMEContains applies the Contains predicate on the "NAME" field.
func NAMEContains(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNAME), v))
	})
}

// NAMEHasPrefix applies the HasPrefix predicate on the "NAME" field.
func NAMEHasPrefix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNAME), v))
	})
}

// NAMEHasSuffix applies the HasSuffix predicate on the "NAME" field.
func NAMEHasSuffix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNAME), v))
	})
}

// NAMEEqualFold applies the EqualFold predicate on the "NAME" field.
func NAMEEqualFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNAME), v))
	})
}

// NAMEContainsFold applies the ContainsFold predicate on the "NAME" field.
func NAMEContainsFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNAME), v))
	})
}

// EMAILEQ applies the EQ predicate on the "EMAIL" field.
func EMAILEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEMAIL), v))
	})
}

// EMAILNEQ applies the NEQ predicate on the "EMAIL" field.
func EMAILNEQ(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEMAIL), v))
	})
}

// EMAILIn applies the In predicate on the "EMAIL" field.
func EMAILIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEMAIL), v...))
	})
}

// EMAILNotIn applies the NotIn predicate on the "EMAIL" field.
func EMAILNotIn(vs ...string) predicate.Physician {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Physician(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEMAIL), v...))
	})
}

// EMAILGT applies the GT predicate on the "EMAIL" field.
func EMAILGT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEMAIL), v))
	})
}

// EMAILGTE applies the GTE predicate on the "EMAIL" field.
func EMAILGTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEMAIL), v))
	})
}

// EMAILLT applies the LT predicate on the "EMAIL" field.
func EMAILLT(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEMAIL), v))
	})
}

// EMAILLTE applies the LTE predicate on the "EMAIL" field.
func EMAILLTE(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEMAIL), v))
	})
}

// EMAILContains applies the Contains predicate on the "EMAIL" field.
func EMAILContains(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEMAIL), v))
	})
}

// EMAILHasPrefix applies the HasPrefix predicate on the "EMAIL" field.
func EMAILHasPrefix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEMAIL), v))
	})
}

// EMAILHasSuffix applies the HasSuffix predicate on the "EMAIL" field.
func EMAILHasSuffix(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEMAIL), v))
	})
}

// EMAILEqualFold applies the EqualFold predicate on the "EMAIL" field.
func EMAILEqualFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEMAIL), v))
	})
}

// EMAILContainsFold applies the ContainsFold predicate on the "EMAIL" field.
func EMAILContainsFold(v string) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEMAIL), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.Positionassingment) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Physician) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Physician) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Physician) predicate.Physician {
	return predicate.Physician(func(s *sql.Selector) {
		p(s.Not())
	})
}
