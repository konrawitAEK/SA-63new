// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/konrawitAEK/app/ent/department"
	"github.com/konrawitAEK/app/ent/physician"
	"github.com/konrawitAEK/app/ent/position"
	"github.com/konrawitAEK/app/ent/positionassingment"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDepartment         = "Department"
	TypePhysician          = "Physician"
	TypePosition           = "Position"
	TypePositionassingment = "Positionassingment"
)

// DepartmentMutation represents an operation that mutate the Departments
// nodes in the graph.
type DepartmentMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_Departmentname       *string
	clearedFields         map[string]struct{}
	formdepartment        map[int]struct{}
	removedformdepartment map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Department, error)
}

var _ ent.Mutation = (*DepartmentMutation)(nil)

// departmentOption allows to manage the mutation configuration using functional options.
type departmentOption func(*DepartmentMutation)

// newDepartmentMutation creates new mutation for $n.Name.
func newDepartmentMutation(c config, op Op, opts ...departmentOption) *DepartmentMutation {
	m := &DepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepartmentID sets the id field of the mutation.
func withDepartmentID(id int) departmentOption {
	return func(m *DepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Department
		)
		m.oldValue = func(ctx context.Context) (*Department, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Department.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDepartment sets the old Department of the mutation.
func withDepartment(node *Department) departmentOption {
	return func(m *DepartmentMutation) {
		m.oldValue = func(context.Context) (*Department, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DepartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDepartmentname sets the Departmentname field.
func (m *DepartmentMutation) SetDepartmentname(s string) {
	m._Departmentname = &s
}

// Departmentname returns the Departmentname value in the mutation.
func (m *DepartmentMutation) Departmentname() (r string, exists bool) {
	v := m._Departmentname
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentname returns the old Departmentname value of the Department.
// If the Department object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DepartmentMutation) OldDepartmentname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDepartmentname is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDepartmentname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentname: %w", err)
	}
	return oldValue.Departmentname, nil
}

// ResetDepartmentname reset all changes of the "Departmentname" field.
func (m *DepartmentMutation) ResetDepartmentname() {
	m._Departmentname = nil
}

// AddFormdepartmentIDs adds the formdepartment edge to Positionassingment by ids.
func (m *DepartmentMutation) AddFormdepartmentIDs(ids ...int) {
	if m.formdepartment == nil {
		m.formdepartment = make(map[int]struct{})
	}
	for i := range ids {
		m.formdepartment[ids[i]] = struct{}{}
	}
}

// RemoveFormdepartmentIDs removes the formdepartment edge to Positionassingment by ids.
func (m *DepartmentMutation) RemoveFormdepartmentIDs(ids ...int) {
	if m.removedformdepartment == nil {
		m.removedformdepartment = make(map[int]struct{})
	}
	for i := range ids {
		m.removedformdepartment[ids[i]] = struct{}{}
	}
}

// RemovedFormdepartment returns the removed ids of formdepartment.
func (m *DepartmentMutation) RemovedFormdepartmentIDs() (ids []int) {
	for id := range m.removedformdepartment {
		ids = append(ids, id)
	}
	return
}

// FormdepartmentIDs returns the formdepartment ids in the mutation.
func (m *DepartmentMutation) FormdepartmentIDs() (ids []int) {
	for id := range m.formdepartment {
		ids = append(ids, id)
	}
	return
}

// ResetFormdepartment reset all changes of the "formdepartment" edge.
func (m *DepartmentMutation) ResetFormdepartment() {
	m.formdepartment = nil
	m.removedformdepartment = nil
}

// Op returns the operation name.
func (m *DepartmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Department).
func (m *DepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DepartmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Departmentname != nil {
		fields = append(fields, department.FieldDepartmentname)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case department.FieldDepartmentname:
		return m.Departmentname()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case department.FieldDepartmentname:
		return m.OldDepartmentname(ctx)
	}
	return nil, fmt.Errorf("unknown Department field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case department.FieldDepartmentname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentname(v)
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DepartmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DepartmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Department numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DepartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Department nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DepartmentMutation) ResetField(name string) error {
	switch name {
	case department.FieldDepartmentname:
		m.ResetDepartmentname()
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.formdepartment != nil {
		edges = append(edges, department.EdgeFormdepartment)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DepartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeFormdepartment:
		ids := make([]ent.Value, 0, len(m.formdepartment))
		for id := range m.formdepartment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedformdepartment != nil {
		edges = append(edges, department.EdgeFormdepartment)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DepartmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case department.EdgeFormdepartment:
		ids := make([]ent.Value, 0, len(m.removedformdepartment))
		for id := range m.removedformdepartment {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DepartmentMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DepartmentMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Department unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DepartmentMutation) ResetEdge(name string) error {
	switch name {
	case department.EdgeFormdepartment:
		m.ResetFormdepartment()
		return nil
	}
	return fmt.Errorf("unknown Department edge %s", name)
}

// PhysicianMutation represents an operation that mutate the Physicians
// nodes in the graph.
type PhysicianMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_NAME           *string
	_EMAIL          *string
	clearedFields   map[string]struct{}
	formuser        *int
	clearedformuser bool
	done            bool
	oldValue        func(context.Context) (*Physician, error)
}

var _ ent.Mutation = (*PhysicianMutation)(nil)

// physicianOption allows to manage the mutation configuration using functional options.
type physicianOption func(*PhysicianMutation)

// newPhysicianMutation creates new mutation for $n.Name.
func newPhysicianMutation(c config, op Op, opts ...physicianOption) *PhysicianMutation {
	m := &PhysicianMutation{
		config:        c,
		op:            op,
		typ:           TypePhysician,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPhysicianID sets the id field of the mutation.
func withPhysicianID(id int) physicianOption {
	return func(m *PhysicianMutation) {
		var (
			err   error
			once  sync.Once
			value *Physician
		)
		m.oldValue = func(ctx context.Context) (*Physician, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Physician.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPhysician sets the old Physician of the mutation.
func withPhysician(node *Physician) physicianOption {
	return func(m *PhysicianMutation) {
		m.oldValue = func(context.Context) (*Physician, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PhysicianMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PhysicianMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PhysicianMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNAME sets the NAME field.
func (m *PhysicianMutation) SetNAME(s string) {
	m._NAME = &s
}

// NAME returns the NAME value in the mutation.
func (m *PhysicianMutation) NAME() (r string, exists bool) {
	v := m._NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldNAME returns the old NAME value of the Physician.
// If the Physician object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PhysicianMutation) OldNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNAME: %w", err)
	}
	return oldValue.NAME, nil
}

// ResetNAME reset all changes of the "NAME" field.
func (m *PhysicianMutation) ResetNAME() {
	m._NAME = nil
}

// SetEMAIL sets the EMAIL field.
func (m *PhysicianMutation) SetEMAIL(s string) {
	m._EMAIL = &s
}

// EMAIL returns the EMAIL value in the mutation.
func (m *PhysicianMutation) EMAIL() (r string, exists bool) {
	v := m._EMAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldEMAIL returns the old EMAIL value of the Physician.
// If the Physician object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PhysicianMutation) OldEMAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEMAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEMAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEMAIL: %w", err)
	}
	return oldValue.EMAIL, nil
}

// ResetEMAIL reset all changes of the "EMAIL" field.
func (m *PhysicianMutation) ResetEMAIL() {
	m._EMAIL = nil
}

// SetFormuserID sets the formuser edge to Positionassingment by id.
func (m *PhysicianMutation) SetFormuserID(id int) {
	m.formuser = &id
}

// ClearFormuser clears the formuser edge to Positionassingment.
func (m *PhysicianMutation) ClearFormuser() {
	m.clearedformuser = true
}

// FormuserCleared returns if the edge formuser was cleared.
func (m *PhysicianMutation) FormuserCleared() bool {
	return m.clearedformuser
}

// FormuserID returns the formuser id in the mutation.
func (m *PhysicianMutation) FormuserID() (id int, exists bool) {
	if m.formuser != nil {
		return *m.formuser, true
	}
	return
}

// FormuserIDs returns the formuser ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// FormuserID instead. It exists only for internal usage by the builders.
func (m *PhysicianMutation) FormuserIDs() (ids []int) {
	if id := m.formuser; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFormuser reset all changes of the "formuser" edge.
func (m *PhysicianMutation) ResetFormuser() {
	m.formuser = nil
	m.clearedformuser = false
}

// Op returns the operation name.
func (m *PhysicianMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Physician).
func (m *PhysicianMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PhysicianMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._NAME != nil {
		fields = append(fields, physician.FieldNAME)
	}
	if m._EMAIL != nil {
		fields = append(fields, physician.FieldEMAIL)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PhysicianMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case physician.FieldNAME:
		return m.NAME()
	case physician.FieldEMAIL:
		return m.EMAIL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PhysicianMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case physician.FieldNAME:
		return m.OldNAME(ctx)
	case physician.FieldEMAIL:
		return m.OldEMAIL(ctx)
	}
	return nil, fmt.Errorf("unknown Physician field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PhysicianMutation) SetField(name string, value ent.Value) error {
	switch name {
	case physician.FieldNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNAME(v)
		return nil
	case physician.FieldEMAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEMAIL(v)
		return nil
	}
	return fmt.Errorf("unknown Physician field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PhysicianMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PhysicianMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PhysicianMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Physician numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PhysicianMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PhysicianMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PhysicianMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Physician nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PhysicianMutation) ResetField(name string) error {
	switch name {
	case physician.FieldNAME:
		m.ResetNAME()
		return nil
	case physician.FieldEMAIL:
		m.ResetEMAIL()
		return nil
	}
	return fmt.Errorf("unknown Physician field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PhysicianMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.formuser != nil {
		edges = append(edges, physician.EdgeFormuser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PhysicianMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case physician.EdgeFormuser:
		if id := m.formuser; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PhysicianMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PhysicianMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PhysicianMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedformuser {
		edges = append(edges, physician.EdgeFormuser)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PhysicianMutation) EdgeCleared(name string) bool {
	switch name {
	case physician.EdgeFormuser:
		return m.clearedformuser
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PhysicianMutation) ClearEdge(name string) error {
	switch name {
	case physician.EdgeFormuser:
		m.ClearFormuser()
		return nil
	}
	return fmt.Errorf("unknown Physician unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PhysicianMutation) ResetEdge(name string) error {
	switch name {
	case physician.EdgeFormuser:
		m.ResetFormuser()
		return nil
	}
	return fmt.Errorf("unknown Physician edge %s", name)
}

// PositionMutation represents an operation that mutate the Positions
// nodes in the graph.
type PositionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_Nameposition       *string
	clearedFields       map[string]struct{}
	formposition        map[int]struct{}
	removedformposition map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Position, error)
}

var _ ent.Mutation = (*PositionMutation)(nil)

// positionOption allows to manage the mutation configuration using functional options.
type positionOption func(*PositionMutation)

// newPositionMutation creates new mutation for $n.Name.
func newPositionMutation(c config, op Op, opts ...positionOption) *PositionMutation {
	m := &PositionMutation{
		config:        c,
		op:            op,
		typ:           TypePosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPositionID sets the id field of the mutation.
func withPositionID(id int) positionOption {
	return func(m *PositionMutation) {
		var (
			err   error
			once  sync.Once
			value *Position
		)
		m.oldValue = func(ctx context.Context) (*Position, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Position.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPosition sets the old Position of the mutation.
func withPosition(node *Position) positionOption {
	return func(m *PositionMutation) {
		m.oldValue = func(context.Context) (*Position, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PositionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetNameposition sets the Nameposition field.
func (m *PositionMutation) SetNameposition(s string) {
	m._Nameposition = &s
}

// Nameposition returns the Nameposition value in the mutation.
func (m *PositionMutation) Nameposition() (r string, exists bool) {
	v := m._Nameposition
	if v == nil {
		return
	}
	return *v, true
}

// OldNameposition returns the old Nameposition value of the Position.
// If the Position object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PositionMutation) OldNameposition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNameposition is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNameposition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameposition: %w", err)
	}
	return oldValue.Nameposition, nil
}

// ResetNameposition reset all changes of the "Nameposition" field.
func (m *PositionMutation) ResetNameposition() {
	m._Nameposition = nil
}

// AddFormpositionIDs adds the formposition edge to Positionassingment by ids.
func (m *PositionMutation) AddFormpositionIDs(ids ...int) {
	if m.formposition == nil {
		m.formposition = make(map[int]struct{})
	}
	for i := range ids {
		m.formposition[ids[i]] = struct{}{}
	}
}

// RemoveFormpositionIDs removes the formposition edge to Positionassingment by ids.
func (m *PositionMutation) RemoveFormpositionIDs(ids ...int) {
	if m.removedformposition == nil {
		m.removedformposition = make(map[int]struct{})
	}
	for i := range ids {
		m.removedformposition[ids[i]] = struct{}{}
	}
}

// RemovedFormposition returns the removed ids of formposition.
func (m *PositionMutation) RemovedFormpositionIDs() (ids []int) {
	for id := range m.removedformposition {
		ids = append(ids, id)
	}
	return
}

// FormpositionIDs returns the formposition ids in the mutation.
func (m *PositionMutation) FormpositionIDs() (ids []int) {
	for id := range m.formposition {
		ids = append(ids, id)
	}
	return
}

// ResetFormposition reset all changes of the "formposition" edge.
func (m *PositionMutation) ResetFormposition() {
	m.formposition = nil
	m.removedformposition = nil
}

// Op returns the operation name.
func (m *PositionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Position).
func (m *PositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PositionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Nameposition != nil {
		fields = append(fields, position.FieldNameposition)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case position.FieldNameposition:
		return m.Nameposition()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case position.FieldNameposition:
		return m.OldNameposition(ctx)
	}
	return nil, fmt.Errorf("unknown Position field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case position.FieldNameposition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameposition(v)
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PositionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PositionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Position numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PositionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PositionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Position nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PositionMutation) ResetField(name string) error {
	switch name {
	case position.FieldNameposition:
		m.ResetNameposition()
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.formposition != nil {
		edges = append(edges, position.EdgeFormposition)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PositionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case position.EdgeFormposition:
		ids := make([]ent.Value, 0, len(m.formposition))
		for id := range m.formposition {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedformposition != nil {
		edges = append(edges, position.EdgeFormposition)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PositionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case position.EdgeFormposition:
		ids := make([]ent.Value, 0, len(m.removedformposition))
		for id := range m.removedformposition {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PositionMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PositionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Position unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PositionMutation) ResetEdge(name string) error {
	switch name {
	case position.EdgeFormposition:
		m.ResetFormposition()
		return nil
	}
	return fmt.Errorf("unknown Position edge %s", name)
}

// PositionassingmentMutation represents an operation that mutate the Positionassingments
// nodes in the graph.
type PositionassingmentMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_DayStart         *time.Time
	clearedFields     map[string]struct{}
	user              *int
	cleareduser       bool
	department        *int
	cleareddepartment bool
	position          *int
	clearedposition   bool
	done              bool
	oldValue          func(context.Context) (*Positionassingment, error)
}

var _ ent.Mutation = (*PositionassingmentMutation)(nil)

// positionassingmentOption allows to manage the mutation configuration using functional options.
type positionassingmentOption func(*PositionassingmentMutation)

// newPositionassingmentMutation creates new mutation for $n.Name.
func newPositionassingmentMutation(c config, op Op, opts ...positionassingmentOption) *PositionassingmentMutation {
	m := &PositionassingmentMutation{
		config:        c,
		op:            op,
		typ:           TypePositionassingment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPositionassingmentID sets the id field of the mutation.
func withPositionassingmentID(id int) positionassingmentOption {
	return func(m *PositionassingmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Positionassingment
		)
		m.oldValue = func(ctx context.Context) (*Positionassingment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Positionassingment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPositionassingment sets the old Positionassingment of the mutation.
func withPositionassingment(node *Positionassingment) positionassingmentOption {
	return func(m *PositionassingmentMutation) {
		m.oldValue = func(context.Context) (*Positionassingment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PositionassingmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PositionassingmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PositionassingmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetDayStart sets the DayStart field.
func (m *PositionassingmentMutation) SetDayStart(t time.Time) {
	m._DayStart = &t
}

// DayStart returns the DayStart value in the mutation.
func (m *PositionassingmentMutation) DayStart() (r time.Time, exists bool) {
	v := m._DayStart
	if v == nil {
		return
	}
	return *v, true
}

// OldDayStart returns the old DayStart value of the Positionassingment.
// If the Positionassingment object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PositionassingmentMutation) OldDayStart(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDayStart is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDayStart requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDayStart: %w", err)
	}
	return oldValue.DayStart, nil
}

// ResetDayStart reset all changes of the "DayStart" field.
func (m *PositionassingmentMutation) ResetDayStart() {
	m._DayStart = nil
}

// SetUserID sets the user edge to Physician by id.
func (m *PositionassingmentMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the user edge to Physician.
func (m *PositionassingmentMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the edge user was cleared.
func (m *PositionassingmentMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the user id in the mutation.
func (m *PositionassingmentMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the user ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *PositionassingmentMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser reset all changes of the "user" edge.
func (m *PositionassingmentMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetDepartmentID sets the department edge to Department by id.
func (m *PositionassingmentMutation) SetDepartmentID(id int) {
	m.department = &id
}

// ClearDepartment clears the department edge to Department.
func (m *PositionassingmentMutation) ClearDepartment() {
	m.cleareddepartment = true
}

// DepartmentCleared returns if the edge department was cleared.
func (m *PositionassingmentMutation) DepartmentCleared() bool {
	return m.cleareddepartment
}

// DepartmentID returns the department id in the mutation.
func (m *PositionassingmentMutation) DepartmentID() (id int, exists bool) {
	if m.department != nil {
		return *m.department, true
	}
	return
}

// DepartmentIDs returns the department ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// DepartmentID instead. It exists only for internal usage by the builders.
func (m *PositionassingmentMutation) DepartmentIDs() (ids []int) {
	if id := m.department; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDepartment reset all changes of the "department" edge.
func (m *PositionassingmentMutation) ResetDepartment() {
	m.department = nil
	m.cleareddepartment = false
}

// SetPositionID sets the position edge to Position by id.
func (m *PositionassingmentMutation) SetPositionID(id int) {
	m.position = &id
}

// ClearPosition clears the position edge to Position.
func (m *PositionassingmentMutation) ClearPosition() {
	m.clearedposition = true
}

// PositionCleared returns if the edge position was cleared.
func (m *PositionassingmentMutation) PositionCleared() bool {
	return m.clearedposition
}

// PositionID returns the position id in the mutation.
func (m *PositionassingmentMutation) PositionID() (id int, exists bool) {
	if m.position != nil {
		return *m.position, true
	}
	return
}

// PositionIDs returns the position ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PositionID instead. It exists only for internal usage by the builders.
func (m *PositionassingmentMutation) PositionIDs() (ids []int) {
	if id := m.position; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPosition reset all changes of the "position" edge.
func (m *PositionassingmentMutation) ResetPosition() {
	m.position = nil
	m.clearedposition = false
}

// Op returns the operation name.
func (m *PositionassingmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Positionassingment).
func (m *PositionassingmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PositionassingmentMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._DayStart != nil {
		fields = append(fields, positionassingment.FieldDayStart)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PositionassingmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case positionassingment.FieldDayStart:
		return m.DayStart()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PositionassingmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case positionassingment.FieldDayStart:
		return m.OldDayStart(ctx)
	}
	return nil, fmt.Errorf("unknown Positionassingment field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PositionassingmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case positionassingment.FieldDayStart:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDayStart(v)
		return nil
	}
	return fmt.Errorf("unknown Positionassingment field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PositionassingmentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PositionassingmentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PositionassingmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Positionassingment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PositionassingmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PositionassingmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PositionassingmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Positionassingment nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PositionassingmentMutation) ResetField(name string) error {
	switch name {
	case positionassingment.FieldDayStart:
		m.ResetDayStart()
		return nil
	}
	return fmt.Errorf("unknown Positionassingment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PositionassingmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, positionassingment.EdgeUser)
	}
	if m.department != nil {
		edges = append(edges, positionassingment.EdgeDepartment)
	}
	if m.position != nil {
		edges = append(edges, positionassingment.EdgePosition)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PositionassingmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case positionassingment.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case positionassingment.EdgeDepartment:
		if id := m.department; id != nil {
			return []ent.Value{*id}
		}
	case positionassingment.EdgePosition:
		if id := m.position; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PositionassingmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PositionassingmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PositionassingmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, positionassingment.EdgeUser)
	}
	if m.cleareddepartment {
		edges = append(edges, positionassingment.EdgeDepartment)
	}
	if m.clearedposition {
		edges = append(edges, positionassingment.EdgePosition)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PositionassingmentMutation) EdgeCleared(name string) bool {
	switch name {
	case positionassingment.EdgeUser:
		return m.cleareduser
	case positionassingment.EdgeDepartment:
		return m.cleareddepartment
	case positionassingment.EdgePosition:
		return m.clearedposition
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PositionassingmentMutation) ClearEdge(name string) error {
	switch name {
	case positionassingment.EdgeUser:
		m.ClearUser()
		return nil
	case positionassingment.EdgeDepartment:
		m.ClearDepartment()
		return nil
	case positionassingment.EdgePosition:
		m.ClearPosition()
		return nil
	}
	return fmt.Errorf("unknown Positionassingment unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PositionassingmentMutation) ResetEdge(name string) error {
	switch name {
	case positionassingment.EdgeUser:
		m.ResetUser()
		return nil
	case positionassingment.EdgeDepartment:
		m.ResetDepartment()
		return nil
	case positionassingment.EdgePosition:
		m.ResetPosition()
		return nil
	}
	return fmt.Errorf("unknown Positionassingment edge %s", name)
}
