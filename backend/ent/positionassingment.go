// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/konrawitAEK/app/ent/department"
	"github.com/konrawitAEK/app/ent/physician"
	"github.com/konrawitAEK/app/ent/position"
	"github.com/konrawitAEK/app/ent/positionassingment"
)

// Positionassingment is the model entity for the Positionassingment schema.
type Positionassingment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DayStart holds the value of the "DayStart" field.
	DayStart time.Time `json:"DayStart,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PositionassingmentQuery when eager-loading is set.
	Edges                 PositionassingmentEdges `json:"edges"`
	department_department *int
	physician_user        *int
	position_position     *int
}

// PositionassingmentEdges holds the relations/edges for other nodes in the graph.
type PositionassingmentEdges struct {
	// Formdata holds the value of the formdata edge.
	Formdata *Physician
	// Formdepartment holds the value of the formdepartment edge.
	Formdepartment *Department
	// Formposition holds the value of the formposition edge.
	Formposition *Position
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FormdataOrErr returns the Formdata value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PositionassingmentEdges) FormdataOrErr() (*Physician, error) {
	if e.loadedTypes[0] {
		if e.Formdata == nil {
			// The edge formdata was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: physician.Label}
		}
		return e.Formdata, nil
	}
	return nil, &NotLoadedError{edge: "formdata"}
}

// FormdepartmentOrErr returns the Formdepartment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PositionassingmentEdges) FormdepartmentOrErr() (*Department, error) {
	if e.loadedTypes[1] {
		if e.Formdepartment == nil {
			// The edge formdepartment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.Formdepartment, nil
	}
	return nil, &NotLoadedError{edge: "formdepartment"}
}

// FormpositionOrErr returns the Formposition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PositionassingmentEdges) FormpositionOrErr() (*Position, error) {
	if e.loadedTypes[2] {
		if e.Formposition == nil {
			// The edge formposition was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: position.Label}
		}
		return e.Formposition, nil
	}
	return nil, &NotLoadedError{edge: "formposition"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Positionassingment) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // DayStart
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Positionassingment) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // department_department
		&sql.NullInt64{}, // physician_user
		&sql.NullInt64{}, // position_position
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Positionassingment fields.
func (po *Positionassingment) assignValues(values ...interface{}) error {
	if m, n := len(values), len(positionassingment.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	po.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field DayStart", values[0])
	} else if value.Valid {
		po.DayStart = value.Time
	}
	values = values[1:]
	if len(values) == len(positionassingment.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_department", value)
		} else if value.Valid {
			po.department_department = new(int)
			*po.department_department = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field physician_user", value)
		} else if value.Valid {
			po.physician_user = new(int)
			*po.physician_user = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field position_position", value)
		} else if value.Valid {
			po.position_position = new(int)
			*po.position_position = int(value.Int64)
		}
	}
	return nil
}

// QueryFormdata queries the formdata edge of the Positionassingment.
func (po *Positionassingment) QueryFormdata() *PhysicianQuery {
	return (&PositionassingmentClient{config: po.config}).QueryFormdata(po)
}

// QueryFormdepartment queries the formdepartment edge of the Positionassingment.
func (po *Positionassingment) QueryFormdepartment() *DepartmentQuery {
	return (&PositionassingmentClient{config: po.config}).QueryFormdepartment(po)
}

// QueryFormposition queries the formposition edge of the Positionassingment.
func (po *Positionassingment) QueryFormposition() *PositionQuery {
	return (&PositionassingmentClient{config: po.config}).QueryFormposition(po)
}

// Update returns a builder for updating this Positionassingment.
// Note that, you need to call Positionassingment.Unwrap() before calling this method, if this Positionassingment
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Positionassingment) Update() *PositionassingmentUpdateOne {
	return (&PositionassingmentClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (po *Positionassingment) Unwrap() *Positionassingment {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Positionassingment is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Positionassingment) String() string {
	var builder strings.Builder
	builder.WriteString("Positionassingment(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", DayStart=")
	builder.WriteString(po.DayStart.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Positionassingments is a parsable slice of Positionassingment.
type Positionassingments []*Positionassingment

func (po Positionassingments) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
