// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/konrawitAEK/app/ent/position"
)

// Position is the model entity for the Position schema.
type Position struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Nameposition holds the value of the "Nameposition" field.
	Nameposition string `json:"Nameposition,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PositionQuery when eager-loading is set.
	Edges PositionEdges `json:"edges"`
}

// PositionEdges holds the relations/edges for other nodes in the graph.
type PositionEdges struct {
	// Position holds the value of the position edge.
	Position []*Positionassingment
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PositionOrErr returns the Position value or an error if the edge
// was not loaded in eager-loading.
func (e PositionEdges) PositionOrErr() ([]*Positionassingment, error) {
	if e.loadedTypes[0] {
		return e.Position, nil
	}
	return nil, &NotLoadedError{edge: "position"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Position) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Nameposition
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Position fields.
func (po *Position) assignValues(values ...interface{}) error {
	if m, n := len(values), len(position.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	po.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Nameposition", values[0])
	} else if value.Valid {
		po.Nameposition = value.String
	}
	return nil
}

// QueryPosition queries the position edge of the Position.
func (po *Position) QueryPosition() *PositionassingmentQuery {
	return (&PositionClient{config: po.config}).QueryPosition(po)
}

// Update returns a builder for updating this Position.
// Note that, you need to call Position.Unwrap() before calling this method, if this Position
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Position) Update() *PositionUpdateOne {
	return (&PositionClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (po *Position) Unwrap() *Position {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Position is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Position) String() string {
	var builder strings.Builder
	builder.WriteString("Position(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", Nameposition=")
	builder.WriteString(po.Nameposition)
	builder.WriteByte(')')
	return builder.String()
}

// Positions is a parsable slice of Position.
type Positions []*Position

func (po Positions) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
